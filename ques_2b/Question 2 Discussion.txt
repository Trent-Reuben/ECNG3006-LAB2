When addressing system performance, the following criteria is assessed:
1. Task priority inversion - Priority inversion is a occurs when a high priority task is indirectly preempted by a low priority task. 
2. All task meet their deadlines  
3. Jitter - the amount of error in the timing of a task over subsequent iterations of a program or loop 
4. Utitization - This is the system utilization by each task.

For this discussion, the variation in performance for questions 2a and 2b are assessed and the expectation of operation is addressed.

Question 2a uses round robin scheduling. In this case, all priorities are set as the same value.
Round-robin scheduling - Round Robin is a CPU scheduling algorithm where each process is assigned a fixed time slot in a cyclic way. It is basically the preemptive version of First come First Serve CPU Scheduling algorithm. (Source: https://www.geeksforgeeks.org/program-round-robin-scheduling-set-1/)

Question 2b uses priority inheritance. 
Priority inheritance: involves boosting the priority of a task holding a lock to that of any other (higher priority) task that tries to take the lock (Source: https://www.digikey.com/en/maker/projects/introduction-to-rtos-solution-to-part-11-priority-inversion/abf4b8f7cd4a4c70bece35678d178321)

Hence using the number of tasks as 3, the values 3! = 6 was used to identify the number of combinations. Thus the priorities were varied 6 times as seen below:

task 1 - gpio_on
task 2 - gpio_off
task 3 - status_msg

Arrangements of 3 = 3! thus 6 possible arrangements
   	
.1 = (Task 1 -> Task 2 -> Task 3)
   	
    xTaskCreate(gpio_on, "gpio_on", 2042, NULL, PRIORITY_HIGH, NULL);
    xTaskCreate(gpio_off, "gpio_off", 2042, NULL, PRIORITY_MID, NULL);
    xTaskCreate(status_msg, "status_msg", 2042, NULL, PRIORITY_LOW, NULL);
	       	
.2 = (Task 1 -> Task 3 -> Task 2)
   	
    xTaskCreate(gpio_on, "gpio_on", 2042, NULL, PRIORITY_HIGH, NULL);
    xTaskCreate(gpio_off, "gpio_off", 2042, NULL, PRIORITY_LOW, NULL);
    xTaskCreate(status_msg, "status_msg", 2042, NULL, PRIORITY_MID, NULL);
	      	
.3 = (Task 2 -> Task 1 -> Task 3)
   	
    xTaskCreate(gpio_on, "gpio_on", 2042, NULL, PRIORITY_MID, NULL);
    xTaskCreate(gpio_off, "gpio_off", 2042, NULL, PRIORITY_HIGH, NULL);
    xTaskCreate(status_msg, "status_msg", 2042, NULL, PRIORITY_LOW, NULL);
	   	
.4 = (Task 2 -> Task 3 -> Task 1)
  	
    xTaskCreate(gpio_on, "gpio_on", 2042, NULL, PRIORITY_LOW, NULL);
    xTaskCreate(gpio_off, "gpio_off", 2042, NULL, PRIORITY_HIGH, NULL);
    xTaskCreate(status_msg, "status_msg", 2042, NULL, PRIORITY_MID, NULL);
	   	
.5 = (Task 3 -> Task 1 -> Task 2)
   	
    xTaskCreate(gpio_on, "gpio_on", 2042, NULL, PRIORITY_MID, NULL);
    xTaskCreate(gpio_off, "gpio_off", 2042, NULL, PRIORITY_LOW, NULL);
    xTaskCreate(status_msg, "status_msg", 2042, NULL, PRIORITY_HIGH, NULL);
	       	
.6 = (Task 3 -> Task 2 -> Task 1)
   	
    xTaskCreate(gpio_on, "gpio_on", 2042, NULL, PRIORITY_LOW, NULL);
    xTaskCreate(gpio_off, "gpio_off", 2042, NULL, PRIORITY_MID, NULL);
    xTaskCreate(status_msg, "status_msg", 2042, NULL, PRIORITY_HIGH, NULL);

The performance of each is given below:
Question 1 runtime stats:
*******************************************************
Task            Abs Time       %Time 
**************************************
uiT            	14174		2
gpio_off       	4923		<1
IDLE           	0		    <1
status_msg     	1198		<1
gpio_on        	505207		73
Tmr Svc        	151561		22
*******************************************************

Question 2a:
*******************************************************
Task            Abs Time       %Time 
**************************************
uiT            	15351		8
gpio_on        	241		   <1
IDLE           	0		   <1
gpio_off       	37		   <1
status_msg     	62		   <1
Tmr Svc        	151579		87
*******************************************************

Question 2b.1:
*******************************************************
Task            Abs Time       %Time 
**************************************
uiT            	14134		1
status_msg     	0		    <1
IDLE           	0		    <1
gpio_off       	496846		42
gpio_on        	504945		43
Tmr Svc        	151557		12
*******************************************************

Question 2b.2:
*******************************************************
Task            Abs Time       %Time 
**************************************
uiT            	14169		2
gpio_off       	5181		<1
IDLE           	0		    <1
status_msg     	1202		<1
gpio_on        	504946		74
Tmr Svc        	151557		22
*******************************************************

Question 2b.3:
*******************************************************
Task            Abs Time       %Time 
**************************************
uiT            	14130		 1
status_msg     	0		    <1
IDLE           	0		    <1
gpio_off       	501589		42
gpio_on        	504945		43
Tmr Svc        	151557		12
*******************************************************

Question 2b.4:
*******************************************************
Task            Abs Time       %Time 
**************************************
uiT            	14174		2
gpio_on        	15243		2
IDLE           	0		    <1
status_msg     	1202		<1
gpio_off       	504886		73
Tmr Svc        	151557		22
*******************************************************

Question 2b.5:
*******************************************************
Task            Abs Time       %Time 
**************************************
uiT            	14179		2
gpio_off       	5177		<1
IDLE           	0		    <1
status_msg     	1202		<1
gpio_on        	504944		74
Tmr Svc        	151557		22
*******************************************************

Question 2b.6:
*******************************************************
Task            Abs Time       %Time 
**************************************
uiT            	14174		2
gpio_on        	15243		2
IDLE           	0		    <1
status_msg     	1202		<1
gpio_off       	504886		73
Tmr Svc        	151557		22
*******************************************************

Discussion:

[Consideration of performance criteria] 
a. Round robin:

 It is observed that for the round robin scheduling, the "Tmr Svc" comprised of the largest percentage of time utilization and execution time. The % time for "gpio_on", "gpio_off" and "status_msg" was less that 1%. This was unexpected. The comparable utilization however was expected given the definition of round robin scheduling, where all task are given a time slice and executed in a cyclic manner. The task jitter is not considered that there was no defined baseline or expected output for the round robin scheduling. Three executions of the program presented the same runtime statistic. Based on this, there was no observed jitter when considering the absolute time. With respect to all task meeting their deadlines, based on the output file, all tasks executed fully. Since round robin scheduling make use of equal priority task, priority inversion does not occur. Given all tasks are of the same priority, the tasks in the ready queue are executed given they can and are executed in a cyclic manner. This is seen in the following:

[0;32mI (3277) Task: gpio_on: Setting GPIO2 high
[0m
[0;32mI (3317) main: GPIO_2 Pin STATUS: 1
[0m
0.5s active wait complete. 
[0;32mI (3787) Task: gpio_off: Setting GPIO2 low
[0m
0.5s active wait complete. 

It is seen that the "status_msg" task executed at the beginning before the "gpio_off" despite being called after "gpio_on" in "app_main". This is due to the active wait where "gpio_off" has to wait for the  mutex to be released. This is seen where "gpio_off" executed after the active wait. However, when the mutex is released within execution time, the gpio_on/gpio_off task executes before the status_msg task. This is seen below.

[0;32mI (4777) Task: gpio_on: Setting GPIO2 high
[0m
0.5s active wait complete. 
[0;32mI (5287) Task: gpio_off: Setting GPIO2 low

b. Priority Inheritance 

General Observation: 
- 2b.4 and 2b.6 have similar performance.
In 2b.4 and 2b.6 where gpio_on has a low priority thus gpio_off had the highest percentage utilization. It is also noted that gpio_off had a high and mid priority between 2b.4 and 2b.6

- 2b.2 and 2b.5 have similar performance. 
For 2b.2 and 2b.5, when gpio_off was set low, gpio_on had the highest percentage utilization. It is also noted that gpio_on had a high and mid priority between 2b.2 and 2b.5

- 2b.1 and 2b.3 have similar performance. 
For 2b.1 and 2b.3, it is observed that when gpio_off and gpio_on inverted priorities, there was a similar output performance w.r.t. to the %time utilization.  

Performance criteria.
1. All tasks were executed hence all deadlines were met.
2. The definition of jitter states "the amount of error in the timing of a task over subsequent iterations of a program or loop". Hence, jitter was not analysed for priority inheritance given changing the priorities affect the operation to be considered an a different form and not an iteration. There was also no statistics obtained for the looping of the program.
3. The CPU utilization is discussed in "general observations" above.
4. It is expected that priority inversion would occur due to gpio_on or gpio_off preempting each other and status_msg would excecute while the mutex is held. This would occur when stat_msg is at lowest priority. In 2b.1 and 2b.3, it is observed from the output that the system behaves accordingly to the priorities of the programs. The remaining combinational priorities executed accordingly and there was no priority inversion occurring.